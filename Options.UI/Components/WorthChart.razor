@namespace Charts

@using Blazorise
@using Blazorise.Charts
@using System.Linq.Expressions
@using System.Reflection
@using System.Text.Json
@using System.Text.Json.Serialization

<script src="js/chart.min.js"></script>

<LineChart @ref="lineChart" TItem="double" OptionsObject="options" />

@inject AuthenticationStateProvider provider
@code {
    [Inject] public OptionsStats.UI.Services.Contracts.IOptionsService _optionsService { get; set; } = default!;

    ICollection<Option> _options { get; set; } = default!;
    LineChart<double> lineChart = default!;
    private Random random = new Random();

    private static JsonSerializerOptions serializerOptions = new()
        {
            ReferenceHandler = ReferenceHandler.IgnoreCycles,
            PropertyNameCaseInsensitive = true
        };

    LineChartOptions options = new LineChartOptions()
        {
            Scales = new ChartScales
            {
                Y = new ChartAxis
                {
                    Type = "linear",
                    Ticks = new ChartAxisTicks()
                    {
                        Callback = (value, index, values) => "$" + value
                    }
                },
            },
            Plugins = new ChartPlugins()
            {
                Tooltip = new ChartTooltip()
                {
                    Callbacks = new ChartTooltipCallbacks()
                    {
                        Label = (value) => "$" + value.FormattedValue
                    }
                }
            }
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await FetchOptions();
    }

    async Task HandleRedraw()
    {
        await lineChart.Clear();

        var dataSet = GetDataSet();

        await lineChart.AddLabelsDatasetsAndUpdate(Labels, GetDataSet());
    }

    private LineChartDataset<double>[] GetDataSet()
    {
        var labels = new List<string>();
        var items = new List<LineChartDataset<double>>();
        var currentYear = DateTime.Now.Year;
        var startDate = new DateTime(currentYear, 1, 1);
        var endDate = new DateTime(currentYear + 1, 1, 1);
        var nextMonthDate = startDate.AddMonths(1);

        var worth = new List<double>();
        List<List<double>> _premiums = new List<List<double>>();
        _options.ToList().ForEach(x => _premiums.Add(new List<double>()));
        Labels.ToList().ForEach(month =>
        {
            double currentWorth = 0;
            var optionsArray = _options.ToArray();
            for (int i = 0; i < optionsArray.Length; i++)
            {
                if (optionsArray[i].StartDate > startDate.Date && optionsArray[i].ExpirationDate < nextMonthDate.Date)
                {
                    currentWorth += optionsArray[i].Worth;
                }
            }

            worth.Add(currentWorth);

            startDate = startDate.AddMonths(1);
            nextMonthDate = nextMonthDate.AddMonths(1);
        });

        var randomColor = ChartColor.FromRgba((byte)random.Next(255), (byte)random.Next(255), (byte)random.Next(255), 0.5f);
        List<string> colors = new List<string> { randomColor };

        items.Add(new LineChartDataset<double>
            {
                Label = "Capital",
                Data = worth,
                BackgroundColor = colors,
                BorderColor = colors,
                Fill = true,
                PointRadius = 3,
                CubicInterpolationMode = "monotone",
            });

        return (items.ToArray());
    }

    string[] Labels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

    private async Task<Guid> GetUserId()
    {
        var authStateProvider = (CustomAuthStateProvider)provider;
        var state = await authStateProvider.GetAuthenticationStateAsync();
        var userId = state.User.Claims.First(c => c.Type == "UserId");
        return Guid.Parse(userId.Value);
    }

    public async Task FetchOptions()
    {
        var userId = await GetUserId();
        OptionsFilter filter = new OptionsFilter
            {
                UserId = userId
            };

        _options = await _optionsService.GetOptionsAsync(filter);
        await HandleRedraw();
    }

}