@page "/Options"
@using BlazorBootstrap
@using Charts
@using ViewModels
@using OptionsStats.UI.Services.Enums

<style>

    .custom-expanded-icon>svg {
    transform: rotate(180deg);
    transition: 0.15s;
    }

    .opt-green {
    color: green;
    }

    .opt-red {
    color: red;
    }

    .mdc-dialog__title {
    text-align: center;
    color: #2E336E !important;
    }

    .mdc-text-field--focused:not(.mdc-text-field--disabled) .mdc-floating-label {
    color: #2E336E !important;
    }

    .opt-margin-bottom {
    margin-bottom: 15px;
    }

    .opt-pl-0 {
    padding: 0px;
    }

    .mdc-dialog__actions {
    padding-right: 20px;
    }

    .mdc-dialog .mdc-dialog__content {
    padding: 20px 15px 0px 15px !important;
    }

    .mdc-table, .mdc-table--striped {
    display: inline-table;
    }

    .mdc-table td, .mdc-table th {
    padding: 5px 10px !important;
    }

    .mdc-table-header-row {
    height: 45px;
    }

    .opt-type-sell {
    background-color: #D9EAD3;
    color: #2E336E;
    }

    .opt-type-put {
    background-color: #C2D2EF;
    color: #2E336E;
    }

    .mdc-tab--active, .mdc-tab--active .mdc-tab__text-label {
    color: #3a0647;
    }

</style>

<script>

    $(document).on("click", ".bb-detail-view-icon", function (event) {
    $(event.currentTarget).toggleClass("custom-expanded-icon");
    var targetRowId = $(event.currentTarget).attr("data-bs-target");
    $(targetRowId).toggleClass("show");
    });

</script>

<div class="row">
    <div class="col-md-10">
        <div class="row mx-auto">
            <div class="col-md-2 opt-margin-bottom opt-pl-0">
                Total Options Count
            </div>
            <div class="col-md-2 opt-margin-bottom">
                @((MarkupString)viewModel.StatsOptionCount)
            </div>
            <div class="col-md-2 opt-margin-bottom opt-pl-0">
                Active Options Count
            </div>
            <div class="col-md-2 opt-margin-bottom">
                @((MarkupString)viewModel.StatsActiveOptionCount)
            </div>
            <div class="col-md-2 opt-margin-bottom opt-pl-0">
                Options Worth
            </div>
            <div class="col-md-2 opt-margin-bottom">
                @((MarkupString)viewModel.StatsOptionWorth)
            </div>
        </div>
        <div class="row mx-auto">
            <div class="col-md-2 opt-margin-bottom opt-pl-0">
                Total Premium
            </div>
            <div class="col-md-2 opt-margin-bottom">
                @((MarkupString)viewModel.StatsTotalPremium)
            </div>
            <div class="col-md-2 opt-margin-bottom opt-pl-0">
                Total Fees
            </div>
            <div class="col-md-2 opt-margin-bottom">
                @((MarkupString)viewModel.StatsTotalFees)
            </div>
            <div class="col-md-2 opt-margin-bottom opt-pl-0">
                Estimated Taxes
            </div>
            <div class="col-md-2 opt-margin-bottom">
                @((MarkupString)viewModel.StatsTotalTax)
            </div>
        </div>
        <div class="row mx-auto">
            <div class="col-md-2 opt-margin-bottom opt-pl-0">
                Fixed Income
            </div>
            <div class="col-md-2 opt-margin-bottom">
                @((MarkupString)viewModel.StatsFixedTotalPremium)
            </div>
            <div class="col-md-2 opt-margin-bottom opt-pl-0">
            </div>
            <div class="col-md-2 opt-margin-bottom">
            </div>
            <div class="col-md-2 opt-margin-bottom opt-pl-0">
            </div>
            <div class="col-md-2 opt-margin-bottom">
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="d-flex justify-content-end">
            <button class="btn btn-primary main-color" @onclick="viewModel.OpenOptionDialog">Create Option</button>
        </div>
    </div>
</div>

<div class="row" style="margin-top: 20px;" >
    <div class="col-md-6">
        <WorthChart @ref="WorthChart" />
    </div>
    <div class="col-md-6">
        <PremiumChart @ref="PremiumChart"/>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <MatDialog @bind-IsOpen="@viewModel.CreateOptionDialogIsOpen">
            <MatDialogTitle>CREATE OPTION</MatDialogTitle>
            <MatDialogContent>

                <div class="row mx-auto">

                    <div class="col-md-6 opt-margin-bottom">
                        <MatTextField Required Label="Ticker name" @bind-Value="@viewModel.Option.TickerName"></MatTextField>
                    </div>

                    <div class="col-md-6 opt-margin-bottom">
                        <MatSelectItem @bind-Value="@viewModel.Option.Type" Items="@viewModel.OptionTypes">
                            <ItemTemplate>
                                <span>@(@context == OptionTypeEnum.SellCall ? "SELL CALL" : "SELL PUT")</span>
                            </ItemTemplate>
                        </MatSelectItem>
                    </div>

                    <div class="col-md-6 opt-margin-bottom">
                        <MatTextField Required Label="Price" @bind-Value="@viewModel.Option.Price"></MatTextField>
                    </div>

                    <div class="col-md-6 opt-margin-bottom">
                        <MatTextField Required Label="Worth" @bind-Value="@viewModel.Option.Worth"></MatTextField>
                    </div>

                    <div class="col-md-6 opt-margin-bottom">
                        <MatTextField Required Label="Contracts" @bind-Value="@viewModel.Option.Contracts"></MatTextField>
                    </div>

                    <div class="col-md-6 opt-margin-bottom">
                        <MatTextField Required Label="Premium" @bind-Value="@viewModel.Option.Premium"></MatTextField>
                    </div>

                    <div class="col-md-6 opt-margin-bottom">
                        <MatTextField Required Label="Delta" @bind-Value="@viewModel.Option.Delta"></MatTextField>
                    </div>

                    <div class="col-md-6 opt-margin-bottom">
                        <MatDatePicker Required Label="Start Date" @bind-Value="viewModel.Option.StartDate" TValue="DateTime"></MatDatePicker>
                    </div>

                    <div class="col-md-6 opt-margin-bottom">
                        <MatDatePicker Required Label="Expiration Date" @bind-Value="viewModel.Option.ExpirationDate" TValue="DateTime"></MatDatePicker>
                    </div>

                </div>

                <MatToastContainer />

            </MatDialogContent>
            <MatDialogActions>
                <button class="btn btn-primary opt-primary-btn" style="margin-bottom: 7px; width: 100px;" @onclick="CreateOption">Create</button>
                <button class="btn btn-primary opt-secondary-btn" style="margin-bottom: 7px; width: 100px;" @onclick="@(() => { viewModel.CreateOptionDialogIsOpen = false; })">Cancel</button>
            </MatDialogActions>
        </MatDialog>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <MatDialog @bind-IsOpen="@viewModel.RollOverDialogIsOpen">
            <MatDialogTitle>ROLL OVER</MatDialogTitle>
            <MatDialogContent>

                <div class="row mx-auto">

                    <div class="col-md-6 opt-margin-bottom">
                        <MatTextField Required Label="Price" @bind-Value="@viewModel.Option.Price"></MatTextField>
                    </div>

                    <div class="col-md-6 opt-margin-bottom">
                        <MatTextField Required Label="Premium" @bind-Value="@viewModel.Option.Premium"></MatTextField>
                    </div>

                    <div class="col-md-6 opt-margin-bottom">
                        <MatTextField Required Label="Delta" @bind-Value="@viewModel.Option.Delta"></MatTextField>
                    </div>

                    <div class="col-md-6 opt-margin-bottom">
                        <MatDatePicker Required Label="Start Date" @bind-Value="@viewModel.Option.StartDate" TValue="DateTime"></MatDatePicker>
                    </div>

                    <div class="col-md-6 opt-margin-bottom">
                        <MatDatePicker Required Label="Expiration Date" @bind-Value="viewModel.Option.ExpirationDate" TValue="DateTime"></MatDatePicker>
                    </div>

                </div>

                <MatToastContainer />

            </MatDialogContent>
            <MatDialogActions>
                <button class="btn btn-primary opt-primary-btn" style="margin-bottom: 7px; width: 100px;" @onclick="RollOver">Roll</button>
                <button class="btn btn-primary opt-secondary-btn" style="margin-bottom: 7px; width: 100px;" @onclick="@(() => { viewModel.RollOverDialogIsOpen = false; })">Cancel</button>
            </MatDialogActions>
        </MatDialog>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <MatDialog @bind-IsOpen="@viewModel.CloseOptionDialogIsOpen">
            <MatDialogTitle>CLOSE OPTION</MatDialogTitle>
            <MatDialogContent>

                <div class="row mx-auto">

                    <div class="col-md-6 opt-margin-bottom">
                        <MatCheckbox Label="Completed" @bind-Value="@viewModel.Option.Completed"></MatCheckbox>
                    </div>

                    <div class="col-md-6 opt-margin-bottom">
                        <MatTextField Disabled="@(!viewModel.Option.Completed)" Label="Return amount" @bind-Value="@viewModel.Option.ReturnAmount"></MatTextField>
                    </div>

                    <div class="col-md-6 opt-margin-bottom">
                        <MatDatePicker Required Label="Closed Date" @bind-Value="viewModel.Option.ClosedDate" TValue="DateTime?"></MatDatePicker>
                    </div>

                </div>

                <MatToastContainer />

            </MatDialogContent>
            <MatDialogActions>
                <button class="btn btn-primary opt-primary-btn" style="margin-bottom: 7px; width: 100px;" @onclick="CloseOption">Close</button>
                <button class="btn btn-primary opt-secondary-btn" style="margin-bottom: 7px; width: 100px;" @onclick="@(() => { viewModel.CloseOptionDialogIsOpen = false; })">Cancel</button>
            </MatDialogActions>
        </MatDialog>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <MatDialog @bind-IsOpen="@viewModel.DeleteOptionDialogIsOpen">
            <MatDialogTitle>DELETE OPTION</MatDialogTitle>
            <MatDialogContent>

                <div class="row mx-auto">

                    <div class="col-md-12 opt-margin-bottom">
                        <h6>Are you sure you want to delete this option?</h6>
                    </div>

                </div>

                <MatToastContainer />

            </MatDialogContent>
            <MatDialogActions>

                <div style="margin-bottom: 7px;">
                    <button class="btn btn-primary opt-secondary-btn" @onclick="@(() => DeleteOption())">Delete Option</button>
                    <button class="btn btn-primary opt-primary-btn" @onclick="@(e => { viewModel.DeleteOptionDialogIsOpen = false; })">Cancel</button>
                </div>

            </MatDialogActions>
        </MatDialog>
    </div>
</div>

<div class="row" style="margin-top: 10px; margin-bottom: 10px;">

    <Grid TItem="Option"
    @ref="optionsGrid"
    Class="table table-hover table-bordered table-striped"
    DataProvider="OptionsDataProvider"
    AllowDetailView="true"
    >
        <GridColumns>

            <GridColumn TItem="Option" HeaderText="Ticker Name" PropertyName="TickerName" SortString="TickerName" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
                <b style="text-transform: uppercase;">@context.TickerName</b>
            </GridColumn>
            <GridColumn TItem="Option" HeaderText="Price" PropertyName="Price" FilterTextboxWidth="80" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Start">
                @String.Format("{0:C}", context.Price)
            </GridColumn>
            <GridColumn TItem="Option" HeaderText="Worth" PropertyName="Worth" FilterTextboxWidth="50" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Start">
                @String.Format("{0:C}", @context.Worth)
            </GridColumn>
            <GridColumn TItem="Option" HeaderText="Premium Profit" PropertyName="Premium" FilterTextboxWidth="50" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Start">
                @((MarkupString)OptionsViewModel.GetTotalPremiumPercentage(context)) (@((MarkupString)OptionsViewModel.GetTotalPremium(context)))
            </GridColumn>
            <GridColumn TItem="Option" HeaderText="Type" PropertyName="Type" FilterTextboxWidth="50" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
                <div class="@(context.Type == Services.Enums.OptionTypeEnum.SellCall ? "opt-type-sell" : "opt-type-put")">@(context.Type == Services.Enums.OptionTypeEnum.SellCall ? "SELL CALL" : "SELL PUT")</div>
            </GridColumn>
            <GridColumn TItem="Option" HeaderText="Duration" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Start">
                @((MarkupString)OptionsViewModel.GetDuration(context))
            </GridColumn>
            <GridColumn TItem="Option" HeaderText="Exp. Date" PropertyName="ExpirationDate" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Start">
                @OptionsViewModel.GetExpirationDateString(context)
            </GridColumn>
            <GridColumn TItem="Option" HeaderText="Status" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Start">
                @((MarkupString)OptionsViewModel.GetOptionStatus(context))
            </GridColumn>

        </GridColumns>

        <GridDetailView TItem="Option">

            <div class="row mx-auto">
                <div class="col-md-5 opt-margin-bottom" style="@(context.RollOvers == null || @context.RollOvers!.Count == 0 ? "display: none;" : "")">
                    <MatTable Items="@context.RollOvers" Context="nested" class="mat-elevation-z5" ShowPaging="false">
                        <MatTableHeader>
                            <th style="width: 25%">Price</th>
                            <th style="width: 40%;">Premium</th>
                            <th style="width: 35%;">Exp. Date</th>
                        </MatTableHeader>
                        <MatTableRow>
                            <td style="width: 25%;">
                                @String.Format("{0:C}", nested.Price)
                            </td>
                            <td style="width: 40%;">
                                @((MarkupString)OptionsViewModel.GetTotalPremium(nested)) (@((MarkupString)OptionsViewModel.GetRollOvelPremiumPercentage(nested, context.Worth)))
                            </td>
                            <td style="width: 35%;">@nested.ExpirationDate.ToString("dd/MM/yyyy")</td>
                        </MatTableRow>
                    </MatTable>
                </div>

                <div class="col-md-7 opt-margin-bottom" style="margin-top: 20px;">
                    <div class="row mx-auto">
                        <div class="col-md-2 opt-margin-bottom opt-pl-0">
                            Status
                        </div>
                        <div class="col-md-4 opt-margin-bottom">
                            @((MarkupString)OptionsViewModel.GetOptionStatus(context))
                        </div>
                        <div class="col-md-2 opt-margin-bottom opt-pl-0">
                            Exp. Date
                        </div>
                        <div class="col-md-4 opt-margin-bottom">
                            @((MarkupString)OptionsViewModel.GetExpirationDateString(context))
                        </div>
                    </div>
                    <div class="row mx-auto">
                        <div class="col-md-2 opt-margin-bottom opt-pl-0">
                            Total Premium
                        </div>
                        <div class="col-md-4 opt-margin-bottom">                        
                            @((MarkupString)OptionsViewModel.GetTotalPremiumPercentage(context)) (@((MarkupString)OptionsViewModel.GetTotalPremium(context)))
                        </div>
                        <div class="col-md-2 opt-margin-bottom opt-pl-0">
                            Avg. Delta
                        </div>
                        <div class="col-md-4 opt-margin-bottom">
                            @((MarkupString)OptionsViewModel.GetTotalDelta(context))
                        </div>
                    </div>
                    <div class="row mx-auto">
                        <div class="col-md-2 opt-margin-bottom opt-pl-0">
                            Reg. Fee
                        </div>
                        <div class="col-md-4 opt-margin-bottom">
                            @((MarkupString)viewModel.GetTotalOptionFees(context))
                        </div>
                        <div class="col-md-2 opt-margin-bottom opt-pl-0">
                            Duration
                        </div>
                        <div class="col-md-4 opt-margin-bottom">
                            @((MarkupString)@OptionsViewModel.GetDuration(context))
                        </div>
                    </div>
                    <div class="row mx-auto">
                        <div class="col-md-2 opt-margin-bottom opt-pl-0">
                            Contracts
                        </div>
                        <div class="col-md-4 opt-margin-bottom">
                            @context.Contracts
                        </div>
                        <div class="col-md-2 opt-margin-bottom opt-pl-0">

                        </div>
                        <div class="col-md-4 opt-margin-bottom">
                        </div>
                    </div>
                </div>

            </div>

            <div class="row mx-auto">
                <div class="col-md-12 opt-margin-bottom" style="text-align: right;">
                    @if (!context.IsClosed)
                    {
                        <button class="btn btn-primary opt-primary-btn" style="width: 100px;" @onclick="@(()=> viewModel.OpenCloseOptionDialog(@context))">Close</button>
                        <button class="btn btn-primary opt-primary-btn" style="width: 100px;" @onclick="@(() => viewModel.OpenRollOverDialog(@context))">Roll Over</button>
                    }

                    <button class="btn btn-primary opt-secondary-btn" style="width: 100px;" @onclick="@(() => viewModel.OpenDeleteOptionDialog(@context))">Delete</button>

                </div>
            </div>

        </GridDetailView>

    </Grid>

</div>
@inject AuthenticationStateProvider provider
@code {
    [Inject] public IOptionsService _optionsService { get; set; } = default!;
    [Inject] public ISettingsService _settingsService { get; set; } = default!;
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    [Inject] protected IMatToaster Toaster { get; set; } = default!;

    private Grid<Option> optionsGrid = default!;
    private OptionsViewModel viewModel = new OptionsViewModel();
    private WorthChart WorthChart = default!;
    private PremiumChart PremiumChart = default!;

    protected override async Task OnInitializedAsync()
    {
        viewModel.Settings = await _settingsService.GetSettingsAsync();
    }

    private async Task CloseOption()
    {
        await UpdateOption();
    }

    private async Task RollOver()
    {
        var parentOption = viewModel.OptionsList.FirstOrDefault(x => x.Id == viewModel.ParentOptionId);
        if (parentOption != null)
        {
            var validationResult = parentOption.ValidateRollOver(viewModel.Option);
            if (validationResult.IsValid)
            {
                await CreateOption();
            }
            else
            {
                Toaster.Add(validationResult.ErrorMessage, MatToastType.Danger, "Validation Error");
            }
        }
        else
        {
            Toaster.Add("Something wrong...", MatToastType.Danger, "Unknown error");
        }
    }

    private async Task UpdateOption()
    {
        var expirationDate = OptionsViewModel.GetExpirationDate(viewModel.Option);
        var validationResult = viewModel.Option.ValidateClosingOption(expirationDate);
        if (validationResult.IsValid)
        {
            PreloadService.Show(SpinnerColor.Primary);

            viewModel.Option.IsClosed = true;

            var result = await _optionsService.UpdateOptionAsync(viewModel.Option);

            await optionsGrid.RefreshDataAsync();

            viewModel.CloseAllOptionDialogs();
            PreloadService.Hide();
        }
        else
        {
            Toaster.Add(validationResult.ErrorMessage, MatToastType.Danger, "Validation Error");
        }
    }

    private async Task CreateOption()
    {
        var userId = await GetUserId();
        viewModel.Option.UserId = userId;
        viewModel.Option.ParentOptionId = viewModel.ParentOptionId;
        viewModel.ParentOptionId = viewModel.ParentOptionId;

        var validationResult = viewModel.Option.IsValid();
        if(validationResult.IsValid)
        {
            PreloadService.Show(SpinnerColor.Primary);

            var result = await _optionsService.CreateOptionAsync(viewModel.Option);

            await optionsGrid.RefreshDataAsync();

            viewModel.CloseAllOptionDialogs();
            PreloadService.Hide();
        }
        else
        {
            Toaster.Add(validationResult.ErrorMessage, MatToastType.Danger, "Validation Error");
        }
    }

    private async Task DeleteOption()
    {
        PreloadService.Show(SpinnerColor.Primary);

        await _optionsService.DeleteOptionAsync(viewModel.Option.Id);

        await optionsGrid.RefreshDataAsync();

        viewModel.CloseAllOptionDialogs();
        PreloadService.Hide();
    }

    private async Task<Guid> GetUserId()
    {
        var authStateProvider = (CustomAuthStateProvider)provider;
        var state = await authStateProvider.GetAuthenticationStateAsync();
        var userId = state.User.Claims.First(c => c.Type == "UserId");
        return Guid.Parse(userId.Value);
    }

    private async Task<GridDataProviderResult<Option>> OptionsDataProvider(GridDataProviderRequest<Option> request)
    {
        PreloadService.Show(SpinnerColor.Primary);

        string sortString = "";
        SortDirection sortDirection = SortDirection.None;

        var userId = await GetUserId();
        OptionsFilter filter = new OptionsFilter
        {
                UserId = userId
        };

        if (request.Sorting is not null && request.Sorting.Any())
        {
            // Note: Multi column sorting is not supported at this moment
            sortString = request.Sorting.FirstOrDefault()!.SortString;
            sortDirection = request.Sorting.FirstOrDefault()!.SortDirection;
        }

        var result = await _optionsService.GetOptionsAsync(filter);
        viewModel.OptionsList = result;
        viewModel.CalculateStatistics();
        await optionsGrid.RefreshDataAsync();

        await InvokeAsync(StateHasChanged);
        await WorthChart.FetchOptions();
        await PremiumChart.FetchOptions();

        PreloadService.Hide();

        return await Task.FromResult(new GridDataProviderResult<Option> { Data = viewModel.OptionsList, TotalCount = viewModel.OptionsList.Count });
    }
}

