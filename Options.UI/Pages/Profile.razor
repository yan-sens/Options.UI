@page "/Profile"
@using global::Options.UI.ViewModels
@using BlazorBootstrap
@using global::Options.UI.Services.Models;
@using global::Options.UI.Services.Contracts

@attribute [Authorize]

@if (viewModel.UserProfile == null)
{
    <p><em>@message</em></p>
}
else
{
    <div class="row mb-3">
        <label class="col-md-3 col-form-label" style="align-content: center;">Name</label>
        <div class="col-md-8">
            <MatTextField Required Label="Name" @bind-Value="@viewModel.UserProfile.Name"></MatTextField>
        </div>
    </div>

    <div class="row mb-3">
        <label class="col-md-3 col-form-label" style="align-content: center;">Phone Number</label>
        <div class="col-md-8">
            <MatTextField Required Label="Phone Number" @bind-Value="@viewModel.UserProfile.PhoneNumber"></MatTextField>
        </div>
    </div>

    <div class="row">
        <button class="btn btn-primary opt-primary-btn" style="width: 100px; margin-top: 70px;" @onclick="UpdateUserProfile">Save</button>
    </div>
}

@inject HttpClient http
@code {
    [Inject] public IUserProfileService _userProfileService { get; set; } = default!;
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    [Inject] protected IMatToaster Toaster { get; set; } = default!;

    private string message = string.Empty;
    private UserProfileViewModel viewModel = new UserProfileViewModel();

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            message = "Loading...";

            viewModel.UserProfile = await http.GetFromJsonAsync<UserProfile>("api/account/profile");
        }
        catch
        {
            message = "Can't read user profile.";
        }
    }

    private async Task UpdateUserProfile()
    {
        PreloadService.Show(SpinnerColor.Primary);

        var result = await _userProfileService.UpdateUserProfileAsync(viewModel.UserProfile!);

        PreloadService.Hide();
    }
}
